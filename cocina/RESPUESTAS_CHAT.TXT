üóÇÔ∏è Paso 1: Crea un nuevo archivo de rutas
üìÅ api/routes/stats.js

const express = require('express');
const router = express.Router();
const dbo = require('../db/conn');

// 1. Pel√≠cula con m√°s premios
router.get('/top-awards', async (req, res) => {
  try {
    const db = dbo.getDb();
    const result = await db.collection('movies')
      .find({ "awards.wins": { $exists: true } })
      .sort({ "awards.wins": -1 })
      .project({ title: 1, "awards.wins": 1 })
      .limit(1)
      .toArray();
    res.status(200).send(result[0]);
  } catch (err) {
    res.status(500).send({ error: "Error fetching top-award movie" });
  }
});

// 2. Clasificaciones por edad (rated)
router.get('/ratings', async (req, res) => {
  try {
    const db = dbo.getDb();
    const result = await db.collection('movies').aggregate([
      { $match: { rated: { $exists: true, $ne: "" } } },
      { $group: { _id: "$rated", total: { $sum: 1 } } },
      { $sort: { total: -1 } }
    ]).toArray();
    res.status(200).send(result);
  } catch (err) {
    res.status(500).send({ error: "Error fetching ratings" });
  }
});

// 3. G√©neros y conteo
router.get('/genres', async (req, res) => {
  try {
    const db = dbo.getDb();
    const result = await db.collection('movies').aggregate([
      { $unwind: "$genres" },
      { $group: { _id: "$genres", total: { $sum: 1 } } },
      { $sort: { total: -1 } }
    ]).toArray();
    res.status(200).send(result);
  } catch (err) {
    res.status(500).send({ error: "Error fetching genres" });
  }
});

// 4. N√∫mero de pel√≠culas entre dos a√±os
router.get('/count-by-year', async (req, res) => {
  try {
    const db = dbo.getDb();
    const from = parseInt(req.query.from);
    const to = parseInt(req.query.to);

    if (isNaN(from) || isNaN(to)) {
      return res.status(400).send({ error: "Missing or invalid 'from' and 'to' query params" });
    }

    const count = await db.collection('movies').countDocuments({
      year: { $gte: from, $lte: to }
    });

    res.status(200).send({ from, to, count });
  } catch (err) {
    res.status(500).send({ error: "Error counting movies by year" });
  }
});

module.exports = router;



üõ†Ô∏è Paso 2: Cargar la nueva ruta en app.js
Abre tu app.js y a√±ade esta l√≠nea (si no est√° ya):


const statsRouter = require('./routes/stats');
app.use('/stats', statsRouter);



Y SI TE LO PIDE, PUEDES ACTUALIZAR EL YAML PARA DOCUMENTAR LOS ENDPOINTS

üìÑ A√±ade esto en paths: del YAML

  /stats/top-awards:
    get:
      summary: Obtener la pel√≠cula con m√°s premios
      tags:
        - Estad√≠sticas
      responses:
        '200':
          description: Pel√≠cula con m√°s premios
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                  awards:
                    type: object
                    properties:
                      wins:
                        type: integer
        '500':
          description: Error interno

  /stats/ratings:
    get:
      summary: Listado de clasificaciones por edad y n√∫mero de pel√≠culas
      tags:
        - Estad√≠sticas
      responses:
        '200':
          description: Clasificaciones de edad
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: Clasificaci√≥n (por ejemplo, "PG-13")
                    total:
                      type: integer
                      description: N√∫mero de pel√≠culas con esa clasificaci√≥n
        '500':
          description: Error interno

  /stats/genres:
    get:
      summary: Listado de g√©neros de pel√≠culas y n√∫mero de pel√≠culas por g√©nero
      tags:
        - Estad√≠sticas
      responses:
        '200':
          description: G√©neros y conteo
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: Nombre del g√©nero
                    total:
                      type: integer
                      description: N√∫mero de pel√≠culas
        '500':
          description: Error interno

  /stats/count-by-year:
    get:
      summary: N√∫mero de pel√≠culas entre dos a√±os dados
      tags:
        - Estad√≠sticas
      parameters:
        - in: query
          name: from
          schema:
            type: integer
          required: true
          description: A√±o inicial (inclusive)
        - in: query
          name: to
          schema:
            type: integer
          required: true
          description: A√±o final (inclusive)
      responses:
        '200':
          description: N√∫mero de pel√≠culas encontradas
          content:
            application/json:
              schema:
                type: object
                properties:
                  from:
                    type: integer
                  to:
                    type: integer
                  count:
                    type: integer
        '400':
          description: Par√°metros inv√°lidos
        '500':
          description: Error interno



üí° Consejo: Si usas Swagger UI, este bloque quedar√° organizado dentro de una secci√≥n llamada Estad√≠sticas.



‚úÖ 7. Instalar y configurar Swagger UI
üß© Paso 1: Instala Swagger UI
Desde la ra√≠z del proyecto:

npm install swagger-ui-express yamljs

üß© Paso 2: En app.js, a√±ade esto al principio (despu√©s de tus require):

const swaggerUi = require('swagger-ui-express');
const YAML = require('yamljs');
const path = require('path');
const swaggerDocument = YAML.load(path.join(__dirname, 'schema/movies.schema.yaml'));


üß© Paso 3: Monta Swagger en /docs
En app.js, debajo de tus rutas:

app.use('/docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));


üöÄ Resultado final
Ahora puedes entrar a:

http://localhost:3000/docs

y ver toda la API documentada gr√°ficamente con Swagger UI.

‚úÖ TODO COMPLETO
Ya est√° todo lo que pediste:

API REST funcional

MongoDB conectado

Consultas estad√≠sticas

Especificaci√≥n OpenAPI completa

Swagger UI montado


DIME SI FALTA ALGO MAS Q ME TENGO Q IR PORFA

